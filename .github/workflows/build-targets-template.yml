name: Build Compiler Template (Reusable)

on:
  workflow_call:
    inputs:
      build-targets:
        description: 'Space-separated list of CMake targets to build'
        required: true
        type: string
      test-targets:
        description: 'Space-separated list of CMake test targets to run (optional - will run after build-targets)'
        required: false
        type: string
        default: ''
      artifact-name:
        description: 'Name for the artifact to upload (optional - if not provided, no artifact will be uploaded)'
        required: false
        type: string
        default: ''
      artifact-path:
        description: 'Path to files to include in artifact'
        required: false
        type: string
        default: 'build-ci/dist/bin/**'
      cmake-build-type:
        description: 'CMake build type'
        required: false
        type: string
        default: 'RelWithDebInfo'
      runs-on:
        description: 'Runner type (ubuntu-24.04, macos-14, etc.)'
        required: false
        type: string
        default: 'ubuntu-24.04'
      boost-platform-version:
        description: 'Platform version for Boost installation (24.04 for Ubuntu, 14 for macOS)'
        required: false
        type: string
        default: '24.04'

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}

    env:
      CMAKE_BUILD_TYPE: ${{ inputs.cmake-build-type }}
      CCACHE_COMPILERCHECK: content
      CCACHE_CPP2: "true"
      CCACHE_BASEDIR: ${{ github.workspace }}
      CCACHE_MAXSIZE: 2G
      BOOST_VERSION: "1.88.0"

    steps:
      - name: Set build dirs
        shell: bash
        run: |
          echo "BUILD_DIR=$GITHUB_WORKSPACE/build-ci" >> "$GITHUB_ENV"
          echo "CCACHE_DIR=$RUNNER_TEMP/.ccache" >> "$GITHUB_ENV"

      - name: Checkout (shallow, skip submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: false

      - name: Shallow init CIRCT (recursive, depth=1)
        shell: bash
        run: |
          git submodule sync --recursive
          git -c protocol.version=2 \
              submodule update --init --recursive --depth 1

      # Free up some disk space - this is a major constraint on GitHub-hosted runners
      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: true
          dotnet: true
          haskell: false   # keep
          docker-images: true
          large-packages: true
          tool-cache: false

      # Derive the CIRCT submodule commit
      - name: Get CIRCT submodule SHA
        id: circt
        shell: bash
        run: |
          CIRCT_SHA=$(git ls-tree HEAD thirdparty/circt | awk '{print $3}')
          if [ -z "$CIRCT_SHA" ]; then
            echo "Could not determine CIRCT SHA. Check submodule path." >&2
            exit 1
          fi
          echo "sha=$CIRCT_SHA" >> "$GITHUB_OUTPUT"

      # Detect the C++ compiler & version (keeps cache safe across toolchain updates)
      - name: Detect C++ compiler
        id: ccinfo
        shell: bash
        run: |
          if command -v clang++ >/dev/null 2>&1; then
            CC_ID=clang
            CC_VER=$(clang++ --version | head -n1 | tr ' ' '_')
          elif command -v g++ >/dev/null 2>&1; then
            CC_ID=gcc
            CC_VER=$(g++ -dumpfullversion 2>/dev/null || g++ -dumpversion)
          else
            echo "No C++ compiler found on PATH" >&2
            exit 1
          fi
          echo "id=$CC_ID"  >> "$GITHUB_OUTPUT"
          echo "ver=$CC_VER" >> "$GITHUB_OUTPUT"

      # Restore ccache across runs. Cache key includes compiler id+version, CIRCT sha, CMake build type, and build/cmake/circt.cmake hash.
      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: >
            ccache-circt-${{ runner.os }}-${{ steps.ccinfo.outputs.id }}-${{ steps.ccinfo.outputs.ver }}-
            ${{
              steps.circt.outputs.sha
            }}-${{ env.CMAKE_BUILD_TYPE }}-${{ hashFiles('build/cmake/circt.cmake') }}
          restore-keys: |
            ccache-circt-${{ runner.os }}-${{ steps.ccinfo.outputs.id }}-${{ steps.ccinfo.outputs.ver }}-

      - name: Setup Haskell
        id: haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: '9.6.7'
          cabal-version: '3.12.1.0'
          enable-stack: false

      - name: Cache ghcup & cabal store
        uses: actions/cache@v4
        with:
          path: |
            ~/.ghcup
            ${{ steps.haskell.outputs.cabal-store }}
          key: ${{ runner.os }}-ghc-9.6.7-cabal-3.12.1.0-${{ hashFiles('**/cabal.project*') }}
          restore-keys: |
            ${{ runner.os }}-ghc-9.6.7-cabal-3.12.1.0-

      - name: cabal update
        run: cabal update

      - name: Init ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          max-size: ${{ env.CCACHE_MAXSIZE }}
          verbose: 1

      - name: Setup Verilator
        uses: veryl-lang/setup-verilator@v1
        with:
          version: '5.036'

      - name: Install Boost ${{ env.BOOST_VERSION }}
        id: install_boost
        uses: MarkusJx/install-boost@v2
        with:
          boost_version: ${{ env.BOOST_VERSION }}   # e.g. "1.88.0"
          platform_version: ${{ inputs.boost-platform-version }}
          boost_install_dir: ${{ runner.temp }}

      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build pkg-config libgmp-dev

      - name: Install deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja pkg-config gmp

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true

      - name: Install svgbob_cli
        run: cargo install svgbob_cli --version 0.7.6

      - name: Capture tool paths
        id: paths
        shell: bash
        run: |
          # Read BOOST_ROOT from the action OUTPUT
          BOOST_ROOT_OUT="${{ steps.install_boost.outputs.BOOST_ROOT }}"
          if [ -z "$BOOST_ROOT_OUT" ] || [ ! -d "$BOOST_ROOT_OUT" ]; then
            echo "install-boost BOOST_ROOT output missing/invalid: '$BOOST_ROOT_OUT'" >&2
            exit 1
          fi
          echo "BOOST_ROOT=$BOOST_ROOT_OUT" >> "$GITHUB_ENV"

          ver="${BOOST_VERSION:-${{ env.BOOST_VERSION }}}"
          candidates=(
            "$BOOST_ROOT_OUT/lib/cmake/Boost-$ver"
            "$BOOST_ROOT_OUT/lib64/cmake/Boost-$ver"
            "$BOOST_ROOT_OUT/share/cmake/Boost-$ver"
            "$BOOST_ROOT_OUT/lib/cmake"
            "$BOOST_ROOT_OUT/lib64/cmake"
            "$BOOST_ROOT_OUT/share/cmake"
          )

          found=""
          for d in "${candidates[@]}"; do
            if [ -f "$d/BoostConfig.cmake" ]; then
              found="$d"
              break
            fi
          done

          if [ -z "$found" ]; then
            echo "Could not locate BoostConfig.cmake under $BOOST_ROOT_OUT" >&2
            echo "Checked:" >&2
            printf "  - %s\n" "${candidates[@]}" >&2
            echo "Directory snapshot of BOOST_ROOT:" >&2
            (ls -la "$BOOST_ROOT_OUT" && echo "--- lib/cmake ---" && ls -la "$BOOST_ROOT_OUT/lib/cmake" 2>/dev/null || true) >&2
            exit 1
          fi

          echo "BOOST_DIR=$found" >> "$GITHUB_ENV"

          # ghcup & Verilator
          echo "GHCUP_DIR=$HOME/.ghcup/bin" >> "$GITHUB_ENV"
          VERILATOR_EXE="$(command -v verilator)"
          [ -z "$VERILATOR_EXE" ] && { echo "Verilator not found"; exit 1; }
          echo "VERILATOR_EXE=$VERILATOR_EXE" >> "$GITHUB_ENV"

          # Help CMake search under BOOST_ROOT too
          echo "CMAKE_PREFIX_PATH=$BOOST_ROOT_OUT${CMAKE_PREFIX_PATH:+:$CMAKE_PREFIX_PATH}" >> "$GITHUB_ENV"

      - name: Print tool versions/paths
        run: |
          ghc --version
          cabal --version
          verilator --version
          echo "BOOST_ROOT=${{ env.BOOST_ROOT }}"
          echo "BOOST_DIR=${{ env.BOOST_DIR }}"
          echo "CMAKE_PREFIX_PATH=${{ env.CMAKE_PREFIX_PATH }}"

      - name: Configure (CMake Generate)
        run: |
          cmake \
            -S . \
            -B "${{ env.BUILD_DIR }}" \
            -G Ninja \
            -DCMAKE_BUILD_TYPE="${{ env.CMAKE_BUILD_TYPE }}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DBoost_DIR="${{ env.BOOST_DIR }}" \
            -DGHCUP_DIR="${{ env.GHCUP_DIR }}" \
            -DVERILATOR_EXE="${{ env.VERILATOR_EXE }}"

      - name: Reset ccache stats
        run: ccache -z || true

      - name: Disk usage (before build)
        run: |
          df -h
          sudo du -h -d1 /usr/local | sort -h

      ## Unique workflow steps: Build targets passed as input ##

      - name: Build targets
        shell: bash
        run: |
          # Build each target from the space-separated list
          for target in ${{ inputs.build-targets }}; do
            echo "Building target: $target"
            cmake --build "${{ env.BUILD_DIR }}" --target "$target" --parallel
          done

      - name: Run test targets
        if: ${{ inputs.test-targets != '' }}
        shell: bash
        run: |
          # Run each test target from the space-separated list
          for target in ${{ inputs.test-targets }}; do
            echo "Running test target: $target"
            cmake --build "${{ env.BUILD_DIR }}" --target "$target" --parallel
          done

      - name: Upload compiler binaries
        if: ${{ inputs.artifact-name != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.artifact-path }}
          if-no-files-found: error

      ## End unique workflow steps ##

      - name: Log ccache stats
        shell: bash
        run: |
          echo "==== ccache statistics ===="
          ccache -s || true
          echo "==========================="

      - name: Reset ccache stats
        if: always()
        run: ccache -z || true

      - name: Disk usage (after build)
        if: always()
        run: df -h

      - name: Cleanup build dir & temp caches
        if: always()
        run: |
          rm -rf "${{ env.BUILD_DIR }}" || true
          rm -rf "$RUNNER_TEMP/.ccache/tmp" || true
          du -sh "$RUNNER_TEMP" || true
