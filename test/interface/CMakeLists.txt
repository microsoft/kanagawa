# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# This file contains a set of unit tests to validate correct functionality
# of the Kanagawa compiler's external interface RTL generation.
# The tests are run within the Verilator RTL simulator.

# Create a CMake target to build a interface unit test. This function also
# creates a CTest target that can be used to run the test.
#
# Usage:
#   add_interface_test(<test_name> <test_source>
#       [OPTIONS <opt1> <opt2> ...]
#       [TESTBENCH <path-to-systemverilog-file>]
#       [TESTBENCH_MODULE <systemverilog-module-name>]
#       [GENERATED_RTL <rtl-file1> <rtl-file2> ...]
#   )
#
#   test_name     - the name of the ctest that will be created. Note that the
#                   actual ctest name will be prefixed with 'interface.'
#                   (i.e. interface.test_name).
#   test_source   - a path to a Kanagawa source file that contains the test code
#   OPTIONS       - (optional) List of options to pass to the Kanagawa compiler
#   TESTBENCH     - (optional) SystemVerilog testbench file name (see note below).
#   TESTBENCH_MODULE -(optional) SystemVerilog testbench module name (default: Testbench)
#   GENERATED_RTL - (optional) - RTL files generated by the Kanagawa compiler that
#                   should be added to the verilator build. If not provided, the
#                   files corresponding to the default test runner will be used.
#   EXTRA_RTL     - (optional) Additional RTL files to add to the simulation build. Unlike GENERATED_RTL,
#                   these files are not relative to any directory so the caller must provide
#                   an absolute path.
#
# If no value is provided for TESTBENCH, a default testbench in interface/test/testbench.sv
# will be used. The default testbench is designed to work with a kanagawa test runner
# defined in interface/test/runner.k.
#
# If the test requires a custom testbench the path to the SystemVerilog file containing
# that testbench must be provided via the TESTBENCH argument. The top-level (testbench)
# module in that file must be named "Testbench".
#
# The function creates a CMake target named interface_test.${test_name} which you can use
# to build the test (both Kanagawa code generation and Verilator compilation).
#
function(add_interface_test test_name test_source)
  set(_opts)
  set(_one TESTBENCH TESTBENCH_MODULE)
  set(_multi OPTIONS GENERATED_RTL EXTRA_RTL)
  cmake_parse_arguments(_ARG "${_opts}" "${_one}" "${_multi}" ${ARGN})

  if (NOT test_name)
    message(FATAL_ERROR "add_interface_test: missing <test_name> name as first argument.")
  endif()

  if (NOT test_source)
    message(FATAL_ERROR "add_interface_test: missing <test_source> name as second argument.")
  endif()

  if (_ARG_TESTBENCH)
    set(_ARG_TESTBENCH "${CMAKE_CURRENT_SOURCE_DIR}/${_ARG_TESTBENCH}")
  else()
    if (_ARG_GENERATED_RTL)
      list(APPEND _ARG_GENERATED_RTL
        _test_runner_main.sv
        _test_runner_main_types.sv
      )
    endif()
  endif()

  set(EXTRA_RTL)
  if (_ARG_EXTRA_RTL)
    foreach(_xrtl IN LISTS _ARG_EXTRA_RTL)
      list(APPEND EXTRA_RTL "${CMAKE_CURRENT_SOURCE_DIR}/${_xrtl}")
    endforeach()
  endif()

  # Clean Verilator byproducts in GitHub Actions to save disk space
  if(DEFINED ENV{GITHUB_ACTIONS})
    set(CLEAN_FLAG CLEAN_VERILATOR_BYPRODUCTS)
  else()
    set(CLEAN_FLAG)
  endif()

  add_kanagawa_verilator_test(${test_name}
    SCOPE interface
    SOURCES ${test_source}
    OPTIONS ${_ARG_OPTIONS}
    GENERATED_RTL ${_ARG_GENERATED_RTL}
    EXTRA_RTL ${EXTRA_RTL}
    TESTBENCH ${_ARG_TESTBENCH}
    TESTBENCH_MODULE ${_ARG_TESTBENCH_MODULE}
    AGGREGATE_TARGET interface_tests
    ${CLEAN_FLAG}
  )
endfunction()

function(add_export_class_test test_name export_class_name)
  add_interface_test(${test_name} ${test_name}.k
    GENERATED_RTL
      ${export_class_name}.sv
      ${export_class_name}_types.sv
    TESTBENCH
      ${test_name}.sv
  )
endfunction()

add_custom_target(interface_tests)

# Add a target to run all interface tests
add_custom_target(run_interface_tests
    COMMAND ${CMAKE_CTEST_COMMAND} --test-dir ${CMAKE_CURRENT_BINARY_DIR} -R "^interface\\." --output-on-failure --verbose
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    DEPENDS interface_tests
    COMMENT "Run all interface tests"
    USES_TERMINAL
)

add_export_class_test(simple_exported_class SimpleExportedClass)
add_export_class_test(exported_class_method_template ExportedClassMethodTemplate)
add_export_class_test(times_five_contained_class TimesFiveContainedClass)
add_export_class_test(another_exported_class AnotherExportedClass)
add_export_class_test(protocol_attributes_class ProtocolAttributesClass)

add_interface_test(is_last_exported_class is_last_exported_class.k
  GENERATED_RTL
    IsLastExportedClass.sv
    IsLastExportedClass_types.sv
  TESTBENCH
    is_last_exported_class.sv
  OPTIONS
    "--Wno-transaction-size" # Warning 10  Call to function with [[last]] parameter without [[transaction_size]] at the call site
)

add_interface_test(external_class external_class.k
  EXTRA_RTL
    external_class.sv
  OPTIONS
    "--import-dir=${CMAKE_CURRENT_SOURCE_DIR}"
)

add_interface_test(external_class_template external_class_template.k
  EXTRA_RTL
    external_class.sv
  OPTIONS
    "--import-dir=${CMAKE_CURRENT_SOURCE_DIR}"
)

add_interface_test(export_class_no_instances export_class_no_instances.k
  GENERATED_RTL
      ExportClassWithInstances.sv
      ExportClassWithArrayInstances.sv
)

add_interface_test(nested_export_class nested_export_class.k
  GENERATED_RTL
    ExportCallsCallbackInner.sv
    ExportCallsCallbackOuter.sv
)

add_interface_test(
  export_class_test_cases_1 export_class_test_cases_1.k
  GENERATED_RTL
    ExportClass.sv
    HasCallback.sv
)

add_interface_test(export_class_test_cases_2 export_class_test_cases_2.k
  GENERATED_RTL
    ClassWithCallback.sv
    ClassWithAsyncCallback.sv
    ClassWithStructCallback.sv
    ArrayOfClassWithObject.sv
)

add_interface_test(export_class_test_cases_3 export_class_test_cases_3.k
  GENERATED_RTL
    ClassWithNoInlineFunction.sv
    ClassWithInitializedMemory.sv
    EndTransactionOnCallbacksInner0.sv
    EndTransactionOnCallbacksInner1.sv
    ExportClassWithExternObject.sv
  EXTRA_RTL
    external_class.sv
  OPTIONS
    "--Wno-transaction-size" # Warning 10  Call to function with [[last]] parameter without [[transaction_size]] at the call site
)

add_interface_test(ecc_mem ecc_mem.k
  GENERATED_RTL
    EccMemMain.sv
    EccMemMain_types.sv
  TESTBENCH
    ecc_mem.sv
)
