# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# This file contains a set of unit tests to validate correct functionality
# of the Kanagawa standard library. The tests are run within the Verilator
# RTL simulator.

# Create a CMake target to build a library unit test. This function also
# creates a CTest target that can be used to run the test.
#
# Usage:
#   add_library_test(<test_name> <test_source>
#       [OPTIONS <opt1> <opt2> ...]
#       [TESTBENCH <path-to-systemverilog-file>]
#   )
#
#   test_name     - the name of the ctest that will be created. Note that the
#                   actual ctest name will be prefixed with 'library.'
#                   (i.e. library.test_name).
#   test_source   - a path to a Kanagawa source file that contains the test code
#   OPTIONS       - (optional) List of options to pass to the Kanagawa compiler
#   TESTBENCH     - (optional) Custom SystemVerilog testbench (see note below).
#   GENERATED_RTL - (optional) - Additional files generated by the Kanagawa compiler that
#                   should be added to the verilator build.
#
# If no value is provided for TESTBENCH, a default testbench in library/test/testbench.sv
# will be used. The default testbench is designed to work with a kanagawa test runner
# defined in library/test/runner.pd.
#
# If the test requires a custom testbench the path to the SystemVerilog file containing
# that testbench must be provided via the TESTBENCH argument. The top-level (testbench)
# module in that file must be named "Testbench".
#
# The function creates a CMake target named library_test.${test_name} which you can use
# to build the test (both Kanagawa code generation and Verilator compilation).
#
function(add_library_test test_name test_source)
  set(_opts)
  set(_one TESTBENCH)
  set(_multi OPTIONS GENERATED_RTL)
  cmake_parse_arguments(_ARG "${_opts}" "${_one}" "${_multi}" ${ARGN})

  if (NOT test_name)
    message(FATAL_ERROR "add_library_test: missing <test_name> name as first argument.")
  endif()

  if (NOT test_source)
    message(FATAL_ERROR "add_library_test: missing <test_source> name as second argument.")
  endif()

  set(SCOPED_TEST_NAME "library.${test_name}")

  set(TARGET_NAME "library_test.${test_name}")

  set(OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/${test_name}")

  set(KANAGAWA_OPTIONS
    "--Wall"
    "--Werror"
    "--check-narrowing-assignment"
    "--parse-docs"
    "--max-block-ram=10000000"
    "--frequency=250"
    "--reset-cycles=5"
    "--register-ratio=3"
    "--backend=sv"
    "--import-dir=${CMAKE_SOURCE_DIR}/library"
    "--resource-usage=${OUTPUT_DIR}/resources.rpt"
    "--define=verbose#true"
  )

  if (_ARG_OPTIONS)
    list(APPEND KANAGAWA_OPTIONS ${_ARG_OPTIONS})
  endif()

  add_custom_target(${TARGET_NAME}
    COMMENT "Building library test: ${test_name}"
  )

  set(KANAGAWA_TARGET_NAME "${TARGET_NAME}.kanagawa")

  # Add Kanagawa RTL generation
  add_kanagawa(${KANAGAWA_TARGET_NAME}
    CLEAN_OUTPUT_DIR
    OUTPUT_DIR ${OUTPUT_DIR}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    SOURCES ${test_source}
    OPTIONS ${KANAGAWA_OPTIONS}
  )

  add_dependencies(${TARGET_NAME} ${KANAGAWA_TARGET_NAME})

  # Add verilate (Verilator build) if Verilator is available
  if (verilator_FOUND)
    # By convention Verilator generated executables are named this way Vxxxx
    set(VERILATOR_TARGET_NAME "${TARGET_NAME}.verilator")

    if (_ARG_TESTBENCH)
      set(TESTBENCH_MODULE "main")

      set(RTL_FILES
        "${CMAKE_CURRENT_SOURCE_DIR}/${_ARG_TESTBENCH}")
    else()
      set(TESTBENCH_MODULE "Testbench")

      set(RTL_FILES
        "${CMAKE_SOURCE_DIR}/library/test/testbench.sv"
        "${OUTPUT_DIR}/_test_runner_main.sv"
      )
    endif()

    if (_ARG_GENERATED_RTL)
      foreach(_rtl IN LISTS _ARG_GENERATED_RTL)
        # Prepend ${OUTPUT_DIR} to each file
        list(APPEND RTL_FILES "${OUTPUT_DIR}/${_rtl}")
      endforeach()
    endif()

    set(VERILATOR_OUTPUT_DIR
      "${OUTPUT_DIR}/verilator"
    )

    add_verilator(${VERILATOR_TARGET_NAME} ${SCOPED_TEST_NAME}
      OUTPUT_DIR ${VERILATOR_OUTPUT_DIR}
      WORKING_DIRECTORY ${VERILATOR_OUTPUT_DIR}
      TESTBENCH ${TESTBENCH_MODULE}
      SOURCES ${RTL_FILES}
      MEM_DIR ${OUTPUT_DIR}
      REQUIRES ${KANAGAWA_TARGET_NAME}
    )

    add_dependencies(${TARGET_NAME} ${VERILATOR_TARGET_NAME})
  endif()

  add_dependencies(library_tests ${TARGET_NAME})
endfunction()

add_custom_target(library_tests
    DEPENDS kanagawa::exe
)

# Add a target to run all library tests
add_custom_target(run_library_tests
    COMMAND ${CMAKE_CTEST_COMMAND} --test-dir ${CMAKE_CURRENT_BINARY_DIR} -R "^library\\." --output-on-failure --verbose
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Run all library tests"
    USES_TERMINAL
)

# Define library tests here
add_library_test(control_async "control/async.k")
add_library_test(data_buffer "data/buffer.k")
add_library_test(data_random_toeplitz "data/random/toeplitz_random.k" TESTBENCH "data/random/toeplitz_random.sv" GENERATED_RTL ToeplitzRandomWrapper.sv)


