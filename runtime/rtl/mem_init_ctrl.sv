// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.


// ----------------------------------------------------
// RAM initialization controller to generate
// the AW-bit address sequence from 0 to 2^AW-1 after
// rst pin is de-asserted along with the write-enable signal
//
// Another parameter LUT_LATENCY determines the read latency
// of the LUT table generated by Kanagawa compiler.
// The address and we output will be delayed by LUT_LATENCY
// to align with the data
//
// Jinwen Xi(jixi@microsoft.com)
// ----------------------------------------------------
`ifndef QUESTA
    `default_nettype none
`endif

module KanagawaMemInitCtrl #(
	parameter	ADDR_WIDTH	= 16,
	parameter 	LUT_LATENCY = 1
)(
	input		wire				clk,
	input		wire				rst,
	input		wire				init_start_in,		//1-cycle pulse to start memory initialization sequence
	output		logic	[ADDR_WIDTH-1:0]	init_addr_out,		//memory write address
	output		logic				init_we_out,		//memory write-enable
	output		logic				init_done_out,		//memory initialization complete,
	output		logic	[ADDR_WIDTH-1:0]	lut_addr_out		//LUT read address(LUT_LATENCY earlier than init_addr_out)
);

	logic	[ADDR_WIDTH-1:0]	init_cnt;
	logic	init_active;
	logic 	init_finish;

	// FSM to generate init_addr/init_we/init_data
	always_ff @(posedge clk)
	begin
		if(rst)
		begin
			init_active <= 1'b0;
			init_cnt 	<= 'd0;
			init_finish	<= 1'b0;
		end
		else
		begin
			if(!init_active)
				init_active <= init_start_in ? 1'b1 : init_active;
			else
			begin
				init_cnt <= init_cnt + 1'b1;
				if(init_cnt == '1)
				begin
					init_active <= 1'b0;
					init_finish	<= 1'b1;
				end
			end
		end
	end

	// lut_addr_out is used to fetch data from LUT taking LUT_LATENCY cylce(s)
	assign lut_addr_out = init_cnt;

	// alignment between lut_data, init_cnt and init_active since
	// lut_data is LUT_LATENCY cycle later than init_active/init_cnt
	KanagawaCascadedFlipFlopsNoReset #(
		.WIDTH		(ADDR_WIDTH+2),
    	.DEPTH 		(LUT_LATENCY)
	) delay_module (
		.clk		(clk),
   		.data_in	({init_cnt, init_active, init_finish}),
    	.data_out	({init_addr_out, init_we_out, init_done_out})
	);

endmodule: KanagawaMemInitCtrl

`ifndef QUESTA
    `default_nettype wire
`endif
